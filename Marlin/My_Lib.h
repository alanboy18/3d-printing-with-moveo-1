#ifndef _stdio_H_
  #include <stdio.h>
#endif
#ifndef _stdlib_H_
  #include <stdlib.h>
#endif
#ifndef _math_H_
  #include <math.h>
#endif
#ifndef _stdbool_H_
  #include <stdbool.h>
#endif
#ifndef _stdbool_H_
  #include <stdbool.h>
#endif
#ifndef _string_H_
  #include <string.h>
#endif

#if ENABLED(DEBUG_LEVELING_FEATURE)
void print_xyz(const char *prefix, const char *suffix, const float x, const float y, const float z)
{
  serialprintPGM(prefix);
  SERIAL_CHAR('(');
  SERIAL_ECHO(x);
  SERIAL_ECHOPAIR(", ", y);
  SERIAL_ECHOPAIR(", ", z);
  SERIAL_CHAR(')');
  if (suffix) serialprintPGM(suffix);
  else
    SERIAL_EOL();
}

void print_Joint(const char *prefix, const char *suffix, const long j1, const long j2, const long j3, const long j4, const long j5)
{
  serialprintPGM(prefix);
  SERIAL_CHAR('(');
  SERIAL_ECHO(j1);
  SERIAL_ECHOPAIR(", ", j2);
  SERIAL_ECHOPAIR(", ", j3);
  SERIAL_ECHOPAIR(", ", j4);
  SERIAL_ECHOPAIR(", ", j5);
  SERIAL_CHAR(')');
  if (suffix) serialprintPGM(suffix);
  else
    SERIAL_EOL();
}

void print_xyz(const char *prefix, const char *suffix, const float xyz[4]) { print_xyz(prefix, suffix, xyz[X_AXIS], xyz[Y_AXIS], xyz[Z_AXIS]); }

void print_Joint(const char *prefix, const char *suffix, const long Joint_POS[5]) { print_Joint(prefix, suffix, Joint_POS[Joint1_AXIS], Joint_POS[Joint2_AXIS], Joint_POS[Joint3_AXIS], Joint_POS[Joint4_AXIS], Joint_POS[Joint5_AXIS]); }

  #define DEBUG_POS(SUFFIX, VAR)                                                                                                                                                                                                                                                                                               \
    do                                                                                                                                                                                                                                                                                                                         \
    {                                                                                                                                                                                                                                                                                                                          \
      print_xyz(PSTR("  " STRINGIFY(VAR) "="), PSTR(" : " SUFFIX "\n"), VAR);                                                                                                                                                                                                                                                  \
    } while (0)

  #define DEBUG_POS_Joint(SUFFIX, VAR)                                                                                                                                                                                                                                                                                         \
    do                                                                                                                                                                                                                                                                                                                         \
    {                                                                                                                                                                                                                                                                                                                          \
      print_Joint(PSTR("  " STRINGIFY(VAR) "="), PSTR(" : " SUFFIX "\n"), VAR);                                                                                                                                                                                                                                                \
    } while (0)
#endif

int32_t HOME_position_Joint_Mesh[25][5] = {
    {2241, 2643, 20041, 3199, -2126}, {256, 2616, 20379, 3199, -2029}, {-1760, 2633, 20163, 3199, -2091}, {-4302, 2391, 23956, 0, 567},  {-5935, 2443, 22889, 0, 927},  {-5139, 2603, 20540, 0, 1644}, {-3691, 2529, 21541, 0, 1349}, {-2096, 2489, 22133, 0, 1168}, {-416, 2479, 22299, 0, 1115},
    {1258, 2495, 22037, 0, 1197},     {1031, 2704, 19316, 0, 1989},    {-408, 2682, 19567, 0, 1919},      {-1851, 2696, 19407, 0, 1963}, {-3240, 2745, 18838, 0, 2119}, {-4531, 2833, 17859, 0, 2380}, {-4055, 3142, 14715, 0, 3178}, {-2895, 3038, 15733, 0, 2926}, {-1666, 2981, 16314, 0, 2780},
    {-402, 2965, 16476, 0, 2739},     {861, 2990, 16222, 0, 2803},     {727, 3376, 12490, 0, 3714},       {-397, 3346, 12775, 0, 3647},  {-1522, 3365, 12594, 0, 3690}, {-2622, 3436, 11935, 0, 3845}, {-3673, 3568, 10742, 0, 4124},
};

int current_Probe_position = 62;
int Probe_pointx = 0, Probe_pointy = 0;

int32_t ZERO_position_Joint[Joint_All] = {2241, 2643, 20041, 3199, -2126};
float ZERO_position[XYZE] = {0, 0, 0.25, 0};

int32_t HOME_position_Joint[Joint_All] = {0, 0, 0, 0, 0};
float HOME_position[XYZE] = {-45.484, -10, 0, current_position[E_AXIS] - 3};

// int32_t HOME_position_Z20_Joint[Joint_All]={-609, 3504, 16908, 0, -2917};
int32_t HOME_position_Z20_Joint[Joint_All] = {4506, 19059, 101482, 85898, -5163};
float HOME_position_Z20[XYZE] = {0, 0, 20, 0};
/*
int32_t HOME_position_Z10_Joint[Joint_All]={-609, 3621, 16573, 0, -2947};
float   HOME_position_Z10[XYZE]={0, 0, 10, 0};
int32_t HOME_position_Z5_Joint[Joint_All]={-609, 3680, 16396, 0, -2960};
float   HOME_position_Z5[XYZE]={0, 0, 5, 0};
int32_t HOME_position_Z0_Joint[Joint_All]={-609, 3739, 16214, 0, -2972};
float   HOME_position_Z0[XYZE]={0, 0, 0, 0};
int32_t HOME_position_ZNeg10_Joint[Joint_All]={-609, 3857, 15830, 0, -2994};
float   HOME_position_ZNeg10[XYZE]={0, 0, -10, 0};
float   HOME_position_Slope[Joint_All]={0,	0.1175,	-0.347,	0,  -0.0275};
//*/

float a[5] = {0.0000000000, 0.0000017500, -0.0000560000, 0.0000000000, 0.0000111250};
float b[5] = {0.0000000000, -1.0184999704, 0.9434999824, 0.0000000000, 0.3357500136};
float c[5] = {128.0000000000, 20845.0000000000, 104799.0000000000, -23.0000000000, 3630.0000000000};
// float a_m[25][5];
// float b_m[25][5];
// float c_m[25][5];
const PROGMEM float Probe_position[300] = {0.00000,  0.00000,   0, 100.00000, 0.00000,   0, 200.00000,  71.21822,  0, 300.00000, 22.86693,  0, 400.00000, 1.82195,   0, 500.00000, 4.11011,   0, 600.00000, 30.12197,  0, 700.00000, 85.03521,  0, 800.00000, 0.00000,   0, 880.00000, 0.00000,   0,
                                           0.00000,  100.00000, 0, 100.00000, 160.71520, 0, 200.00000,  100.00000, 0, 300.00000, 100.00000, 0, 400.00000, 100.00000, 0, 500.00000, 100.00000, 0, 600.00000, 100.00000, 0, 700.00000, 100.00000, 0, 800.00000, 187.01779, 0, 880.00000, 100.00000, 0,
                                           71.21822, 200.00000, 0, 100.00000, 200.00000, 0, 200.00000,  200.00000, 0, 300.00000, 200.00000, 0, 400.00000, 200.00000, 0, 500.00000, 200.00000, 0, 600.00000, 200.00000, 0, 700.00000, 200.00000, 0, 800.00000, 200.00000, 0, 808.78178, 200.00000, 0,
                                           22.86693, 300.00000, 0, 100.00000, 300.00000, 0, 200.00000,  300.00000, 0, 300.00000, 300.00000, 0, 400.00000, 269.63275, 0, 500.00000, 275.60718, 0, 600.00000, 300.00000, 0, 700.00000, 300.00000, 0, 800.00000, 300.00000, 0, 857.13307, 300.00000, 0,
                                           1.82195,  400.00000, 0, 100.00000, 400.00000, 0, 200.00000,  400.00000, 0, 300.00000, 335.00000, 0, 400.00000, 400.00000, 0, 500.00000, 400.00000, 0, 600.00000, 369.11277, 0, 700.00000, 400.00000, 0, 800.00000, 400.00000, 0, 878.17805, 400.00000, 0,
                                           4.11011,  500.00000, 0, 100.00000, 500.00000, 0, 200.00000,  500.00000, 0, 300.00000, 545.00000, 0, 400.00000, 500.00000, 0, 500.00000, 500.00000, 0, 600.00000, 510.88723, 0, 700.00000, 500.00000, 0, 800.00000, 500.00000, 0, 875.88989, 500.00000, 0,
                                           30.12197, 600.00000, 0, 100.00000, 600.00000, 0, 209.837014, 615.00000, 0, 300.00000, 615.00000, 0, 400.00000, 615.00000, 0, 500.00000, 615.00000, 0, 600.00000, 615.00000, 0, 670.16299, 615.00000, 0, 800.00000, 600.00000, 0, 849.87803, 600.00000, 0,
                                           85.03521, 700.00000, 0, 100.00000, 700.00000, 0, 209.837014, 715.00000, 0, 300.00000, 715.00000, 0, 400.00000, 715.00000, 0, 500.00000, 715.00000, 0, 600.00000, 715.00000, 0, 670.16299, 715.00000, 0, 800.00000, 692.98221, 0, 880.00000, 700.00000, 0,
                                           0.00000,  800.00000, 0, 100.00000, 719.28480, 0, 209.837014, 815.00000, 0, 300.00000, 815.00000, 0, 400.00000, 815.00000, 0, 500.00000, 815.00000, 0, 600.00000, 815.00000, 0, 670.16299, 815.00000, 0, 800.00000, 800.00000, 0, 880.00000, 800.00000, 0,
                                           0.00000,  880.00000, 0, 100.00000, 880.00000, 0, 200.00000,  808.78178, 0, 300.00000, 857.13307, 0, 400.00000, 878.17805, 0, 500.00000, 875.88989, 0, 600.00000, 849.87803, 0, 700.00000, 794.96479, 0, 800.00000, 880.00000, 0, 880.00000, 880.00000, 0};

const PROGMEM float Probe_position_ADD[39] = {160.71520, 100.00000, 0,         719.28480, 100.00000, 0,         335.00000, 300.00000, 0,         545.00000, 300.00000, 0,         269.63275, 400.00000, 0,         610.36725, 400.00000, 0,         275.60718, 500.00000,
                                              0,         604.39282, 500.00000, 0,         369.11277, 600.00000, 0,         510.88723, 600.00000, 0,         794.96479, 700.00000, 0,         187.01779, 800.00000, 0,         692.98221, 800.00000, 0};

const PROGMEM float a_m1[125] = {0.0000000000,  0.0000026250,  -0.0000550000, 0.0000000000,  -0.0000106250, 0.0000000000,  0.0000015000,  -0.0000561250, -0.0000001250, -0.0000113750, 0.0000000000,  0.0000010000,  -0.0000567500, 0.0000000000,  -0.0000118750, 0.0000000000,  0.0000015000,  -0.0000565000,
                                 0.0000000000,  -0.0000113750, 0.0000000000,  0.0000027500,  -0.0000558750, 0.0000000000,  -0.0000107500, 0.0000001250,  0.0000055000,  -0.0000555000, -0.0000001250, -0.0000090000, 0.0000000000,  0.0000047500,  -0.0000551250, 0.0000000000,  -0.0000093750, 0.0000000000,
                                 0.0000043750,  -0.0000550000, 0.0000000000,  -0.0000095000, 0.0000000000,  0.0000050000,  -0.0000556250, 0.0000000000,  -0.0000093750, 0.0000001250,  0.0000053750,  -0.0000552500, 0.0000000000,  -0.0000090000, 0.0000000000,  0.0000033750,  -0.0000553750, 0.0000000000,
                                 0.0000103750,  0.0000000000,  0.0000023750,  -0.0000555000, 0.0000000000,  0.0000106250,  0.0000000000,  0.0000022500,  -0.0000558750, 0.0000000000,  0.0000108750,  0.0000000000,  0.0000025000,  -0.0000555000, 0.0000001250,  0.0000106250,  -0.0000001250, 0.0000035000,
                                 -0.0000556250, 0.0000000000,  0.0000101250,  0.0000000000,  0.0000061250,  -0.0000562500, 0.0000000000,  0.0000088750,  0.0000000000,  0.0000055000,  -0.0000557500, 0.0000000000,  0.0000090000,  0.0000000000,  0.0000053750,  -0.0000551250, 0.0000000000,  0.0000090000,
                                 0.0000000000,  0.0000053750,  -0.0000557500, 0.0000000000,  0.0000090000,  0.0000000000,  0.0000060000,  -0.0000560000, 0.0000000000,  0.0000088750,  0.0000000000,  0.0000090000,  -0.0000613750, 0.0000000000,  0.0000086250,  0.0000000000,  0.0000085000,  -0.0000601250,
                                 0.0000000000,  0.0000086250,  0.0000000000,  0.0000081250,  -0.0000591250, 0.0000000000,  0.0000085000,  -0.0000001250, 0.0000082500,  -0.0000596250, 0.0000000000,  0.0000085000,  0.0000000000,  0.0000088750,  -0.0000622500, 0.0000000000,  0.0000086250};

const PROGMEM float b_m1[125] = {0.0000000000,  -0.9827499986, 0.9254999757,  0.0000000000,  -0.3207499981, 0.0000000000,  -1.0255000591, 0.9477499723,  0.0002500000,  -0.3387500048, 0.0000000000,  -1.0414999723, 0.9564999938,  0.0000000000,  -0.3452500105, 0.0000000000,  -1.0255000591, 0.9474999905,
                                 0.0000000000,  -0.3387500048, 0.0000000000,  -0.9829999804, 0.9252499938,  0.0000000000,  -0.3210000098, -0.0002500000, -0.8815000057, 0.8939999938,  0.0002500000,  -0.2739999890, 0.0000000000,  -0.9075000286, 0.8977500200,  0.0000000000,  -0.2867499888, 0.0000000000,
                                 -0.9167500138, 0.8999999762,  0.0000000000,  -0.2915000021, 0.0000000000,  -0.9075000286, 0.8977500200,  0.0000000000,  -0.2867499888, 0.0002500000,  -0.8817499876, 0.8939999938,  0.0000000000,  -0.2739999890, 0.0000000000,  -0.9627500176, 0.9162499905,  0.0000000000,
                                 0.3122499883,  0.0000000000,  -0.9912499785, 0.9290000200,  0.0000000000,  0.3247500062,  0.0000000000,  -1.0015000105, 0.9342499971,  0.0000000000,  0.3287500143,  0.0000000000,  -0.9909999967, 0.9294999838,  0.0002500000,  0.3242500126,  -0.0002500000, -0.9629999995,
                                 0.9162499905,  0.0000000000,  0.3122499883,  0.0000000000,  -0.8642500043, 0.8945000172,  0.0000000000,  0.2647500038,  0.0000000000,  -0.8820000291, 0.8939999938,  0.0000000000,  0.2739999890,  0.0000000000,  -0.8877500296, 0.8942499757,  0.0000000000,  0.2775000036,
                                 0.0000000000,  -0.8817499876, 0.8945000172,  0.0000000000,  0.2739999890,  0.0000000000,  -0.8644999862, 0.8945000172,  0.0000000000,  0.2647500038,  0.0000000000,  -0.7990000248, 0.9452499747,  0.0000000000,  0.2192499936,  0.0000000000,  -0.8080000281, 0.9277499914,
                                 0.0000000000,  0.2277500033,  0.0000000000,  -0.8112499714, 0.9232500196,  0.0000000000,  0.2304999977,  -0.0002500000, -0.8080000281, 0.9287499785,  0.0000000000,  0.2275000066,  0.0000000000,  -0.7987499833, 0.9440000057,  0.0000000000,  0.2192499936};

const PROGMEM float c_m1[125] = {4503.0000000000,  21265.0000000000,  101258.0000000000, 85898.0000000000,  -4295.0000000000, 2489.0000000000,  20772.0000000000,  105454.0000000000, 85898.0000000000,  -3650.0000000000, 249.0000000000,   20616.0000000000,  106887.0000000000, 85898.0000000000,
                                 -3423.0000000000, -2019.0000000000,  20772.0000000000,  105455.0000000000, 85898.0000000000, -3650.0000000000, -4110.0000000000,  21265.0000000000,  101261.0000000000, 85898.0000000000, -4295.0000000000, -3478.0000000000,  23070.0000000000,  88137.0000000000,
                                 85898.0000000000, -6175.0000000000,  -1720.0000000000,  22498.0000000000,  92042.0000000000, 85898.0000000000, -5634.0000000000,  138.0000000000,    22312.0000000000,  93355.0000000000, 85898.0000000000, -5449.0000000000,  1980.0000000000,   22497.0000000000,
                                 92044.0000000000, 85898.0000000000,  -5634.0000000000,  3693.0000000000,   23070.0000000000, 88136.0000000000, 85898.0000000000,  -6175.0000000000,  2376.0000000000,   21541.0000000000, 99069.0000000000, -23.0000000000,    4499.0000000000,   867.0000000000,
                                 21161.0000000000, 102113.0000000000, -23.0000000000,    4043.0000000000,   -704.0000000000,  21038.0000000000, 103135.0000000000, -23.0000000000,    3887.0000000000,   -2268.0000000000, 21161.0000000000, 102113.0000000000, -23.0000000000,    4043.0000000000,
                                 -3753.0000000000, 21540.0000000000,  99070.0000000000,  -23.0000000000,    4500.0000000000,  -3320.0000000000, 23523.0000000000,  85155.0000000000,  -23.0000000000,    6456.0000000000,  -2015.0000000000, 23067.0000000000,  88158.0000000000,  -23.0000000000,
                                 6049.0000000000,  -657.0000000000,   22918.0000000000,  89157.0000000000,  -23.0000000000,   5912.0000000000,  704.0000000000,    23067.0000000000,  88159.0000000000,  -23.0000000000,   6049.0000000000,  2025.0000000000,   23523.0000000000,  85154.0000000000,
                                 -23.0000000000,   6456.0000000000,   1753.0000000000,   26201.0000000000,  68787.0000000000, -23.0000000000,   8574.0000000000,   580.0000000000,    25657.0000000000,  71976.0000000000, -23.0000000000,   8173.0000000000,   -622.0000000000,   25481.0000000000,
                                 73024.0000000000, -23.0000000000,    8040.0000000000,   -1820.0000000000,  25658.0000000000, 71975.0000000000, -23.0000000000,    8173.0000000000,   -2983.0000000000,  26201.0000000000, 68789.0000000000, -23.0000000000,    8574.0000000000};

const PROGMEM float a_m2[500] = {
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0002140000,  -0.0011160000, 0.0000000000,  0.0000840000,  -0.0000020000, 0.0002160000,  -0.0011280000, 0.0000000000,  0.0000840000,  0.0000020000,
    0.0002220000,  -0.0011400000, 0.0000000000,  0.0000880000,  0.0000000000,  0.0002180000,  -0.0011360000, 0.0000000000,  0.0000860000,  0.0000000000,  0.0002140000,  -0.0011060000, 0.0000000000,  0.0000860000,  0.0000000000,  0.0002140000,  -0.0011040000, 0.0000000000,  0.0000840000,  0.0000000000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0002220000,  -0.0011480000, 0.0000000000,  0.0000880000,  0.0000000000,  0.0000320000,  -0.0001800000,
    0.0000000000,  0.0000140000,  0.0000040000,  0.0000080000,  -0.0000780000, 0.0000000000,  0.0000100000,  0.0000000000,  0.0000360000,  -0.0002100000, 0.0000020000,  -0.0000180000, 0.0000000000,  0.0000400000,  -0.0002240000, 0.0000000000,  -0.0000200000, 0.0000000000,  0.0000100000,  -0.0000920000, 0.0000000000,
    0.0000100000,  0.0000000000,  0.0000580000,  -0.0003080000, 0.0000000000,  0.0000260000,  0.0000000000,  0.0002140000,  -0.0010840000, 0.0000000000,  0.0000820000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0002160000,  -0.0011080000, 0.0000000000,  0.0000840000,
    0.0000000000,  0.0000340000,  -0.0001820000, 0.0000000000,  0.0000140000,  0.0000000000,  0.0000340000,  -0.0001920000, 0.0000000000,  -0.0000160000, -0.0000040000, 0.0000020000,  -0.0000560000, 0.0000000000,  -0.0000080000, 0.0000000000,  0.0000060000,  -0.0000640000, 0.0000000000,  -0.0000100000, 0.0000000000,
    0.0000040000,  -0.0000660000, -0.0000020000, -0.0000060000, 0.0000000000,  0.0000060000,  -0.0000760000, 0.0000020000,  -0.0000100000, 0.0000000000,  0.0000080000,  -0.0000760000, 0.0000000000,  0.0000080000,  0.0000000000,  0.0000860000,  -0.0004560000, 0.0000000000,  0.0000360000,  0.0000000000,  0.0002080000,
    -0.0010780000, 0.0000000000,  0.0000840000,  0.0000000000,  0.0002140000,  -0.0011080000, 0.0000000000,  0.0000860000,  0.0000000000,  0.0000100000,  -0.0000800000, 0.0000000000,  0.0000100000,  0.0000000000,  0.0000060000,  -0.0000800000, -0.0000040000, -0.0000100000, -0.0000020000, 0.0000000000,  -0.0000600000,
    0.0000060000,  -0.0000060000, -0.0000120000, -0.0000060000, -0.0000600000, 0.0000620000,  -0.0000120000, 0.0000040000,  -0.0000040000, -0.0000460000, -0.0000140000, -0.0000080000, 0.0000000000,  0.0000020000,  -0.0000580000, 0.0000020000,  -0.0000060000, 0.0000000000,  0.0000120000,  -0.0000880000, 0.0000000000,
    -0.0000080000, 0.0000020000,  0.0000100000,  -0.0000980000, 0.0000000000,  0.0000100000,  0.0000000000,  0.0002120000,  -0.0010940000, 0.0000000000,  0.0000820000,  0.0000000000,  0.0002180000,  -0.0011340000, 0.0000000000,  0.0000860000,  -0.0000020000, 0.0000380000,  -0.0002120000, 0.0000000000,  -0.0000180000,
    0.0000000000,  0.0000000000,  -0.0000660000, 0.0000000000,  -0.0000120000, -0.0000060000, -0.0000040000, -0.0000520000, 0.0000260000,  -0.0000080000, 0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  -0.0000140000,
    -0.0000040000, -0.0000640000, 0.0000960000,  -0.0000120000, 0.0000000000,  0.0000060000,  -0.0000700000, -0.0000020000, -0.0000080000, -0.0000040000, 0.0000080000,  -0.0000760000, 0.0000000000,  0.0000100000,  -0.0000040000, 0.0002160000,  -0.0011100000, 0.0000000000,  0.0000840000,  0.0000000000,  0.0002200000,
    -0.0011240000, 0.0000000000,  0.0000840000,  0.0000000000,  0.0000420000,  -0.0002320000, 0.0000000000,  -0.0000200000, 0.0000000000,  0.0000040000,  -0.0000640000, 0.0000000000,  -0.0000060000, -0.0000140000, -0.0000080000, -0.0000460000, 0.0000920000,  -0.0000080000, 0.0000000000,  0.0000000000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000100000,  -0.0000040000, -0.0000400000, -0.0000680000, -0.0000060000, 0.0000000000,  0.0000060000,  -0.0000720000, 0.0000000000,  -0.0000080000, 0.0000000000,  0.0000120000,  -0.0000860000, 0.0000000000,
    0.0000100000,  0.0000000000,  0.0002180000,  -0.0011240000, 0.0000000000,  0.0000860000,  0.0000000000,  0.0002220000,  -0.0011360000, 0.0000000000,  0.0000880000,  0.0000000000,  0.0000120000,  -0.0000860000, 0.0000000000,  0.0000100000,  0.0000000000,  0.0000080000,  -0.0000800000, 0.0000040000,  -0.0000100000,
    0.0000000000,  0.0000020000,  -0.0000580000, 0.0000020000,  -0.0000080000, -0.0000180000, -0.0000040000, -0.0000620000, 0.0001080000,  -0.0000140000, 0.0000020000,  -0.0000060000, -0.0000520000, 0.0000020000,  -0.0000100000, 0.0000000000,  0.0000040000,  -0.0000620000, -0.0000040000, -0.0000080000, 0.0000000000,
    0.0000080000,  -0.0000820000, -0.0000020000, -0.0000100000, 0.0000000000,  0.0000140000,  -0.0000980000, 0.0000000000,  0.0000080000,  0.0000000000,  0.0002200000,  -0.0011420000, 0.0000000000,  0.0000880000,  0.0000000000,  0.0002300000,  -0.0011780000, 0.0000000000,  0.0000880000,  -0.0000020000, 0.0000540000,
    -0.0002980000, 0.0000000000,  0.0000240000,  0.0000000000,  0.0000080000,  -0.0000780000, 0.0000000000,  0.0000080000,  0.0000000000,  0.0000140000,  -0.0000960000, 0.0000020000,  -0.0000060000, 0.0000000000,  0.0000100000,  -0.0000760000, 0.0000000000,  -0.0000080000, 0.0000000000,  0.0000100000,  -0.0000780000,
    -0.0000020000, -0.0000120000, 0.0000000000,  0.0000180000,  -0.0001120000, -0.0000040000, -0.0000120000, 0.0000000000,  0.0000080000,  -0.0000780000, 0.0000000000,  0.0000080000,  0.0000000000,  0.0002200000,  -0.0011260000, 0.0000000000,  0.0000840000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0002200000,  -0.0011280000, 0.0000000000,  0.0000860000,  0.0000000000,  0.0002140000,  -0.0010960000, 0.0000000000,  0.0000840000,  0.0000000000,  0.0000180000,  -0.0001240000, 0.0000000000,  0.0000100000,
    0.0000000000,  0.0000140000,  -0.0000960000, 0.0000000000,  0.0000100000,  0.0000000000,  0.0000120000,  -0.0000900000, 0.0000000000,  0.0000100000,  0.0000000000,  0.0000200000,  -0.0001300000, 0.0000000000,  0.0000120000,  0.0000000000,  0.0002200000,  -0.0011320000, 0.0000000000,  0.0000860000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000020000,  0.0002200000,
    -0.0011320000, 0.0000000000,  0.0000860000,  0.0000000000,  0.0002220000,  -0.0011340000, 0.0000000000,  0.0000860000,  0.0000000000,  0.0002160000,  -0.0011100000, 0.0000000000,  0.0000820000,  0.0000000000,  0.0002240000,  -0.0011540000, 0.0000000000,  0.0000880000,  0.0000000000,  0.0002140000,  -0.0011060000,
    0.0000000000,  0.0000840000,  0.0000000000,  0.0002220000,  -0.0011380000, 0.0000000000,  0.0000900000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000};
const PROGMEM float b_m2[500] = {
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  -1.6770000000, 6.1080000000,  0.0000000000,  -0.2800000000, 0.0010000000,  -1.6820000000, 6.1360000000,  0.0000000000,  -0.2820000000, 0.0010000000,
    -1.6850000000, 6.1420000000,  0.0000000000,  -0.2820000000, 0.0000000000,  -1.6810000000, 6.1260000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6830000000, 6.1370000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6830000000, 6.1320000000,  0.0000000000,  -0.2820000000, 0.0000000000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  -1.6810000000, 6.1280000000,  0.0000000000,  -0.2800000000, 0.0000000000,  -1.0960000000, 3.0800000000,
    0.0000000000,  -0.0450000000, 0.0000000000,  -0.9660000000, 2.2090000000,  0.0000000000,  0.0370000000,  0.0000000000,  -1.1240000000, 3.2310000000,  -0.0010000000, 0.0570000000,  0.0000000000,  -1.1520000000, 3.3860000000,  0.0000000000,  0.0700000000,  0.0000000000,  -0.9730000000, 2.2780000000,  0.0000000000,
    0.0290000000,  0.0000000000,  -1.2310000000, 3.8040000000,  0.0000000000,  -0.1030000000, 0.0000000000,  -1.6770000000, 6.1040000000,  0.0000000000,  -0.2790000000, 0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  -1.6800000000, 6.1200000000,  0.0000000000,  -0.2800000000,
    0.0000000000,  -1.0970000000, 3.0810000000,  0.0000000000,  -0.0450000000, 0.0000000000,  -1.0990000000, 3.0960000000,  0.0000000000,  0.0460000000,  0.0000000000,  -0.9630000000, 2.1360000000,  0.0000000000,  -0.0460000000, 0.0000000000,  -0.9750000000, 2.0320000000,  0.0000000000,  -0.0670000000, 0.0000000000,
    -0.9740000000, 2.0410000000,  0.0010000000,  -0.0650000000, 0.0000000000,  -0.9650000000, 2.1920000000,  0.0010000000,  -0.0390000000, 0.0000000000,  -0.9620000000, 2.1240000000,  0.0000000000,  0.0480000000,  0.0000000000,  -1.3310000000, 4.3320000000,  0.0000000000,  -0.1440000000, 0.0000000000,  -1.6780000000,
    6.1130000000,  0.0000000000,  -0.2800000000, 0.0000000000,  -1.6810000000, 6.1300000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -0.9670000000, 2.2120000000,  0.0000000000,  0.0370000000,  0.0000000000,  -0.9630000000, 2.1320000000,  0.0000000000,  -0.0470000000, 0.0010000000,  -1.0140000000, 2.0360000000,
    -0.0030000000, -0.0810000000, 0.0020000000,  -1.0370000000, 2.0740000000,  -0.0130000000, -0.0840000000, 0.0000000000,  -1.0380000000, 2.0730000000,  -0.0030000000, -0.0840000000, 0.0000000000,  -0.9990000000, 2.0170000000,  -0.0010000000, -0.0790000000, 0.0000000000,  -0.9700000000, 2.2480000000,  0.0000000000,
    -0.0320000000, -0.0010000000, -0.9850000000, 2.3890000000,  0.0000000000,  0.0170000000,  0.0000000000,  -1.6820000000, 6.1330000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6850000000, 6.1470000000,  0.0000000000,  -0.2830000000, 0.0010000000,  -1.1230000000, 3.2280000000,  0.0000000000,  0.0570000000,
    0.0000000000,  -0.9740000000, 2.0330000000,  0.0000000000,  -0.0660000000, 0.0010000000,  -1.0360000000, 2.0720000000,  -0.0030000000, -0.0840000000, 0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0010000000,
    -1.0380000000, 2.0740000000,  -0.0020000000, -0.0840000000, 0.0000000000,  -0.9650000000, 2.0750000000,  -0.0010000000, -0.0560000000, 0.0000000000,  -0.9640000000, 2.1740000000,  0.0000000000,  0.0410000000,  0.0000000000,  -1.6800000000, 6.1210000000,  0.0000000000,  -0.2800000000, 0.0000000000,  -1.6820000000,
    6.1360000000,  0.0000000000,  -0.2820000000, 0.0000000000,  -1.1530000000, 3.3880000000,  0.0000000000,  0.0700000000,  0.0000000000,  -0.9720000000, 2.0380000000,  0.0000000000,  -0.0650000000, 0.0010000000,  -1.0380000000, 2.0770000000,  0.0000000000,  -0.0840000000, 0.0000000000,  0.0000000000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0090000000,  -1.0360000000, 2.0800000000,  -0.0540000000, -0.0830000000, 0.0000000000,  -0.9650000000, 2.0880000000,  0.0000000000,  -0.0540000000, 0.0000000000,  -0.9660000000, 2.1950000000,  0.0000000000,
    0.0390000000,  0.0000000000,  -1.6830000000, 6.1360000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6810000000, 6.1320000000,  0.0000000000,  -0.2820000000, 0.0000000000,  -0.9720000000, 2.2770000000,  0.0000000000,  0.0290000000,  0.0000000000,  -0.9660000000, 2.2000000000,  0.0000000000,  -0.0370000000,
    0.0000000000,  -0.9890000000, 2.0190000000,  -0.0010000000, -0.0740000000, 0.0090000000,  -1.0320000000, 2.0710000000,  -0.0560000000, -0.0830000000, 0.0010000000,  -1.0270000000, 2.0520000000,  -0.0070000000, -0.0830000000, 0.0000000000,  -0.9780000000, 2.0250000000,  0.0000000000,  -0.0700000000, 0.0000000000,
    -0.9660000000, 2.2010000000,  -0.0010000000, -0.0370000000, 0.0000000000,  -0.9990000000, 2.4970000000,  0.0000000000,  0.0060000000,  0.0000000000,  -1.6820000000, 6.1330000000,  0.0000000000,  -0.2820000000, 0.0000000000,  -1.6810000000, 6.1290000000,  0.0000000000,  -0.2820000000, -0.0010000000, -1.2310000000,
    3.8090000000,  0.0000000000,  -0.1040000000, 0.0000000000,  -0.9640000000, 2.1550000000,  0.0000000000,  0.0440000000,  0.0000000000,  -0.9850000000, 2.3840000000,  -0.0010000000, -0.0170000000, 0.0000000000,  -0.9630000000, 2.1340000000,  0.0000000000,  -0.0460000000, 0.0000000000,  -0.9630000000, 2.1530000000,
    -0.0010000000, -0.0440000000, 0.0000000000,  -1.0030000000, 2.5200000000,  0.0000000000,  -0.0040000000, 0.0000000000,  -0.9640000000, 2.1550000000,  0.0000000000,  0.0440000000,  0.0000000000,  -1.6840000000, 6.1430000000,  0.0000000000,  -0.2820000000, 0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  -1.6800000000, 6.1240000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6790000000, 6.1140000000,  0.0000000000,  -0.2800000000, 0.0000000000,  -1.0190000000, 2.6180000000,  0.0000000000,  -0.0050000000,
    0.0000000000,  -0.9730000000, 2.2860000000,  0.0000000000,  0.0270000000,  0.0000000000,  -0.9760000000, 2.3130000000,  0.0000000000,  0.0250000000,  0.0000000000,  -1.0440000000, 2.7830000000,  0.0000000000,  -0.0200000000, 0.0000000000,  -1.6800000000, 6.1260000000,  0.0000000000,  -0.2810000000, 0.0000000000,
    0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  -0.0010000000, -1.6820000000,
    6.1320000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6810000000, 6.1310000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6800000000, 6.1250000000,  0.0000000000,  -0.2810000000, 0.0000000000,  -1.6820000000, 6.1330000000,  0.0000000000,  -0.2820000000, 0.0000000000,  -1.6790000000, 6.1210000000,
    0.0000000000,  -0.2800000000, 0.0000000000,  -1.6810000000, 6.1270000000,  0.0000000000,  -0.2810000000, 0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000,  0.0000000000};
const PROGMEM float c_m2[500] = {
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      51788.0000000000,  40489.0000000000,  19324.0000000000,  0.0000000000,      8443.0000000000,   56945.0000000000,
    40490.0000000000,  19321.0000000000,  0.0000000000,      8443.0000000000,   61686.0000000000,  40490.0000000000,  19318.0000000000,  0.0000000000,      8443.0000000000,   -61671.0000000000, 40489.0000000000,  19324.0000000000,  0.0000000000,      8443.0000000000,   -56876.0000000000, 40491.0000000000,
    19314.0000000000,  0.0000000000,      8443.0000000000,   -51579.0000000000, 40490.0000000000,  19319.0000000000,  0.0000000000,      8443.0000000000,   0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      45550.0000000000,  40488.0000000000,  19330.0000000000,  0.0000000000,      8442.0000000000,   50993.0000000000,  36791.0000000000,  40566.0000000000,  0.0000000000,
    6653.0000000000,   55493.0000000000,  33130.0000000000,  65206.0000000000,  0.0000000000,      4336.0000000000,   62322.0000000000,  37159.0000000000,  38271.0000000000,  85923.0000000000,  -6858.0000000000,  -59739.0000000000, 37508.0000000000,  36186.0000000000,  85923.0000000000,  -7039.0000000000,
    -55576.0000000000, 33587.0000000000,  61781.0000000000,  0.0000000000,      4678.0000000000,   -51171.0000000000, 38265.0000000000,  31813.0000000000,  0.0000000000,      7409.0000000000,   -44937.0000000000, 40490.0000000000,  19313.0000000000,  0.0000000000,      8444.0000000000,   0.0000000000,
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      43294.0000000000,  40490.0000000000,  19317.0000000000,  0.0000000000,      8443.0000000000,   44037.0000000000,  36791.0000000000,  40566.0000000000,  0.0000000000,      6653.0000000000,   48714.0000000000,  36829.0000000000,
    40270.0000000000,  85923.0000000000,  -6683.0000000000,  54115.0000000000,  32494.0000000000,  70212.0000000000,  85923.0000000000,  -3824.0000000000,  61632.0000000000,  31204.0000000000,  82389.0000000000,  85923.0000000000,  -2480.0000000000,  -58029.0000000000, 31327.0000000000,  81051.0000000000,
    85924.0000000000,  -2636.0000000000,  -51180.0000000000, 33016.0000000000,  66025.0000000000,  85923.0000000000,  -4256.0000000000,  -47755.0000000000, 32443.0000000000,  70703.0000000000,  0.0000000000,      3770.0000000000,   -44444.0000000000, 38992.0000000000,  27644.0000000000,  0.0000000000,
    7760.0000000000,   -44211.0000000000, 40492.0000000000,  19307.0000000000,  0.0000000000,      8444.0000000000,   38138.0000000000,  40490.0000000000,  19317.0000000000,  0.0000000000,      8443.0000000000,   39408.0000000000,  33130.0000000000,  65204.0000000000,  0.0000000000,      4336.0000000000,
    43630.0000000000,  32494.0000000000,  70215.0000000000,  85924.0000000000,  -3824.0000000000,  49225.0000000000,  30340.0000000000,  95895.0000000000,  85923.0000000000,  -774.0000000000,   60690.0000000000,  30248.0000000000,  101927.0000000000, 85911.0000000000,  101.0000000000,    -55484.0000000000,
    30248.0000000000,  101925.0000000000, 85922.0000000000,  100.0000000000,    -45502.0000000000, 30520.0000000000,  91793.0000000000,  85923.0000000000,  -1324.0000000000,  -41241.0000000000, 33390.0000000000,  63168.0000000000,  85923.0000000000,  -4544.0000000000,  -40078.0000000000, 34253.0000000000,
    57022.0000000000,  0.0000000000,      5141.0000000000,   -39055.0000000000, 40489.0000000000,  19322.0000000000,  0.0000000000,      8443.0000000000,   33396.0000000000,  40490.0000000000,  19320.0000000000,  0.0000000000,      8443.0000000000,   35094.0000000000,  37159.0000000000,  38271.0000000000,
    85923.0000000000,  -6858.0000000000,  36361.0000000000,  31205.0000000000,  82389.0000000000,  85923.0000000000,  -2480.0000000000,  46495.0000000000,  30248.0000000000,  101924.0000000000, 85926.0000000000,  100.0000000000,    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      -39106.0000000000, 30248.0000000000,  101928.0000000000, 85902.0000000000,  101.0000000000,    -34187.0000000000, 31869.0000000000,  75674.0000000000,  85924.0000000000,  -3239.0000000000,
    -34810.0000000000, 32845.0000000000,  67433.0000000000,  0.0000000000,      4109.0000000000,   -34312.0000000000, 40489.0000000000,  19323.0000000000,  0.0000000000,      8443.0000000000,   28754.0000000000,  40489.0000000000,  19322.0000000000,  0.0000000000,      8443.0000000000,   29143.0000000000,
    37508.0000000000,  36184.0000000000,  85923.0000000000,  -7039.0000000000,  27989.0000000000,  31327.0000000000,  81051.0000000000,  85923.0000000000,  -2636.0000000000,  20279.0000000000,  30249.0000000000,  101923.0000000000, 85910.0000000000,  100.0000000000,    0.0000000000,      0.0000000000,
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      -22118.0000000000, 30248.0000000000,  101923.0000000000, 85930.0000000000,  100.0000000000,    -26470.0000000000, 32018.0000000000,  74320.0000000000,
    85924.0000000000,  -3387.0000000000,  -29188.0000000000, 32985.0000000000,  66328.0000000000,  0.0000000000,      4222.0000000000,   -29671.0000000000, 40490.0000000000,  19319.0000000000,  0.0000000000,      8443.0000000000,   23959.0000000000,  40488.0000000000,  19326.0000000000,  0.0000000000,
    8442.0000000000,   22502.0000000000,  33587.0000000000,  61780.0000000000,  0.0000000000,      4678.0000000000,   19595.0000000000,  33052.0000000000,  65742.0000000000,  85923.0000000000,  -4285.0000000000,  14827.0000000000,  30729.0000000000,  88397.0000000000,  85923.0000000000,  -1756.0000000000,
    5931.0000000000,   30247.0000000000,  100782.0000000000, 85910.0000000000,  -71.0000000000,    -5418.0000000000,  30259.0000000000,  99364.0000000000,  85927.0000000000,  -281.0000000000,   -14065.0000000000, 31033.0000000000,  84378.0000000000,  85924.0000000000,  -2246.0000000000,  -17917.0000000000,
    33052.0000000000,  65742.0000000000,  85924.0000000000,  -4285.0000000000,  -23991.0000000000, 34802.0000000000,  53266.0000000000,  0.0000000000,      5498.0000000000,   -24876.0000000000, 40488.0000000000,  19328.0000000000,  0.0000000000,      8442.0000000000,   18662.0000000000,  40486.0000000000,
    19338.0000000000,  0.0000000000,      8442.0000000000,   18229.0000000000,  38265.0000000000,  31815.0000000000,  0.0000000000,      7409.0000000000,   13634.0000000000,  32668.0000000000,  68857.0000000000,  0.0000000000,      3962.0000000000,   10378.0000000000,  34213.0000000000,  57227.0000000000,
    85923.0000000000,  -5126.0000000000,  3815.0000000000,   32495.0000000000,  70198.0000000000,  85923.0000000000,  -3826.0000000000,  -3514.0000000000,  32664.0000000000,  68812.0000000000,  85924.0000000000,  -3970.0000000000,  -9972.0000000000,  34899.0000000000,  52541.0000000000,  85924.0000000000,
    -5570.0000000000,  -14759.0000000000, 32668.0000000000,  68857.0000000000,  0.0000000000,      3962.0000000000,   -19979.0000000000, 40489.0000000000,  19322.0000000000,  0.0000000000,      8443.0000000000,   0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      17532.0000000000,  40489.0000000000,  19324.0000000000,  0.0000000000,      8443.0000000000,   10755.0000000000,  40489.0000000000,  19322.0000000000,  0.0000000000,      8443.0000000000,   6775.0000000000,
    35299.0000000000,  49977.0000000000,  0.0000000000,      5804.0000000000,   1629.0000000000,   33668.0000000000,  61185.0000000000,  0.0000000000,      4737.0000000000,   -3763.0000000000,  33831.0000000000,  60006.0000000000,  0.0000000000,      4852.0000000000,   -8710.0000000000,  35947.0000000000,
    45813.0000000000,  0.0000000000,      6184.0000000000,   -11672.0000000000, 40489.0000000000,  19323.0000000000,  0.0000000000,      8443.0000000000,   0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      11294.0000000000,  40489.0000000000,  19322.0000000000,  0.0000000000,
    8443.0000000000,   6138.0000000000,   40489.0000000000,  19323.0000000000,  0.0000000000,      8443.0000000000,   1396.0000000000,   40489.0000000000,  19324.0000000000,  0.0000000000,      8443.0000000000,   -3245.0000000000,  40488.0000000000,  19329.0000000000,  0.0000000000,      8442.0000000000,
    -8040.0000000000,  40490.0000000000,  19319.0000000000,  0.0000000000,      8443.0000000000,   -13337.0000000000, 40488.0000000000,  19325.0000000000,  0.0000000000,      8442.0000000000,   0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000,
    0.0000000000,      0.0000000000,      0.0000000000,      0.0000000000};

/**
 * Move the planner to the position stored in the destination array, which is
 * used by G0/G1/G2/G3/G5 and many other functions to set a destination.
 */
inline void Set_current_XYZE(const float (&Set_current_XYZ_point)[XYZE])
{
  current_position[X_AXIS] = Set_current_XYZ_point[X_AXIS];
  current_position[Y_AXIS] = Set_current_XYZ_point[Y_AXIS];
  current_position[Z_AXIS] = Set_current_XYZ_point[Z_AXIS];
  current_position[E_AXIS] = Set_current_XYZ_point[E_AXIS];

  DEBUG_POS("Set_current", current_position);
}

inline void Set_current_Joint(const int32_t (&Set_current_Joint_point)[Joint_All])
{
  current_position_Joint[Joint1_AXIS] = Set_current_Joint_point[Joint1_AXIS];
  current_position_Joint[Joint2_AXIS] = Set_current_Joint_point[Joint2_AXIS];
  current_position_Joint[Joint3_AXIS] = Set_current_Joint_point[Joint3_AXIS];
  current_position_Joint[Joint4_AXIS] = Set_current_Joint_point[Joint4_AXIS];
  current_position_Joint[Joint5_AXIS] = Set_current_Joint_point[Joint5_AXIS];

  DEBUG_POS_Joint("Set_current_Joint", current_position_Joint);
}

inline void Set_current_Joint_5(const int32_t Set_current_Joint_point1, const int32_t Set_current_Joint_point2, const int32_t Set_current_Joint_point3, const int32_t Set_current_Joint_point4, const int32_t Set_current_Joint_point5)
{
  current_position_Joint[Joint1_AXIS] = Set_current_Joint_point1;
  current_position_Joint[Joint2_AXIS] = Set_current_Joint_point2;
  current_position_Joint[Joint3_AXIS] = Set_current_Joint_point3;
  current_position_Joint[Joint4_AXIS] = Set_current_Joint_point4;
  current_position_Joint[Joint5_AXIS] = Set_current_Joint_point5;

  DEBUG_POS_Joint("Set_current_Joint_5", current_position_Joint);
}

inline void Set_current_Joint_Curve(const float point)
{
  DEBUG_POS_Joint("(Before)Set_current_Joint_Curve", current_position_Joint);
  float point1 = point * 100;
  current_position_Joint[Joint1_AXIS] = a[0] * point1 * point1 + b[0] * point1 + c[0];
  current_position_Joint[Joint2_AXIS] = a[1] * point1 * point1 + b[1] * point1 + c[1];
  current_position_Joint[Joint3_AXIS] = a[2] * point1 * point1 + b[2] * point1 + c[2];
  current_position_Joint[Joint4_AXIS] = a[3] * point1 * point1 + b[3] * point1 + c[3];
  current_position_Joint[Joint5_AXIS] = a[4] * point1 * point1 + b[4] * point1 + c[4];

  // SERIAL_ECHOLNPAIR(" point:", point);

  DEBUG_POS_Joint("(After)Set_current_Joint_Curve", current_position_Joint);
}

inline void Set_current_Joint_Curve_many(const int num_total, const float point)
{
  DEBUG_POS_Joint("(Before)Set_current_Joint_Curve_many", current_position_Joint);
  float point1 = point * 100;
  current_position_Joint[Joint1_AXIS] = pgm_read_float_near(&a_m2[num_total * 5 + 0]) * point1 * point1 + pgm_read_float_near(&b_m2[num_total * 5 + 0]) * point1 + pgm_read_float_near(&c_m2[num_total * 5 + 0]);
  current_position_Joint[Joint2_AXIS] = pgm_read_float_near(&a_m2[num_total * 5 + 1]) * point1 * point1 + pgm_read_float_near(&b_m2[num_total * 5 + 1]) * point1 + pgm_read_float_near(&c_m2[num_total * 5 + 1]);
  current_position_Joint[Joint3_AXIS] = pgm_read_float_near(&a_m2[num_total * 5 + 2]) * point1 * point1 + pgm_read_float_near(&b_m2[num_total * 5 + 2]) * point1 + pgm_read_float_near(&c_m2[num_total * 5 + 2]);
  current_position_Joint[Joint4_AXIS] = pgm_read_float_near(&a_m2[num_total * 5 + 3]) * point1 * point1 + pgm_read_float_near(&b_m2[num_total * 5 + 3]) * point1 + pgm_read_float_near(&c_m2[num_total * 5 + 3]);
  current_position_Joint[Joint5_AXIS] = pgm_read_float_near(&a_m2[num_total * 5 + 4]) * point1 * point1 + pgm_read_float_near(&b_m2[num_total * 5 + 4]) * point1 + pgm_read_float_near(&c_m2[num_total * 5 + 4]);

  // SERIAL_ECHOLNPAIR(" point:", point);

  DEBUG_POS_Joint("(After)Set_current_Joint_Curve_many", current_position_Joint);
}

int X_Y_to_Number(const float Nx, const float Ny)
{
  int tempX = (int)(Nx / 45);
  int tempY = (int)(Ny / 45);
  int temp = 0;
  // SERIAL_ECHOLNPAIR("tempY*5+tempX:", tempY*5+tempX);
  switch (tempY * 5 + tempX)
  { // y*5+x
    case 0:
      temp = 0;
      break;
    case 1:
      temp = 1;
      break;
    case 2:
      temp = 2;
      break;
    case 3:
      temp = 3;
      break;
    case 4:
      temp = 4;
      break;
    case 9:
      temp = 5;
      break;
    case 8:
      temp = 6;
      break;
    case 7:
      temp = 7;
      break;
    case 6:
      temp = 8;
      break;
    case 5:
      temp = 9;
      break;
    case 10:
      temp = 10;
      break;
    case 11:
      temp = 11;
      break;
    case 12:
      temp = 12;
      break;
    case 13:
      temp = 13;
      break;
    case 14:
      temp = 14;
      break;
    case 19:
      temp = 15;
      break;
    case 18:
      temp = 16;
      break;
    case 17:
      temp = 17;
      break;
    case 16:
      temp = 18;
      break;
    case 15:
      temp = 19;
      break;
    case 20:
      temp = 20;
      break;
    case 21:
      temp = 21;
      break;
    case 22:
      temp = 22;
      break;
    case 23:
      temp = 23;
      break;
    case 24:
      temp = 24;
      break;
  }
  return temp;
}

float Forward_Curve(float point_FC, int number_mat, int Joint_num)
{
  // SERIAL_ECHOPAIR("point_FC:", point_FC);
  // SERIAL_ECHOPAIR(" number_mat:", number_mat);
  // SERIAL_ECHOPAIR(" Joint_num:", Joint_num);
  // float temp_return = c_m[number_mat][Joint_num];
  float temp_return = pgm_read_float_near(&a_m1[number_mat * 5 + Joint_num]) * point_FC * point_FC + pgm_read_float_near(&b_m1[number_mat * 5 + Joint_num]) * point_FC + pgm_read_float_near(&c_m1[number_mat * 5 + Joint_num]); // + b_m[0][Joint_num]*point_FC + c_m[0][Joint_num];
  // SERIAL_ECHOPAIR(" return data:", temp_return);
  // SERIAL_ECHOLNPAIR(" c_m[0][0]:", c_m[0][Joint_num]);

  return temp_return;
}

void Set_current_Joint_Curve_More(float numberx, float numbery, float numberz)
{
  int number = X_Y_to_Number(numberx, numbery);
  // int number = 0;
  // SERIAL_ECHOLNPAIR("number:", number);

  // DEBUG_POS_Joint("(Before)Set_current_Joint_Curve_More", current_position_Joint);
  float point1 = numberz * 100;

  // SERIAL_ECHOLNPAIR("Forward_Curve(2000,0,0)", Forward_Curve(2000,0,0));

  current_position_Joint[Joint1_AXIS] = (int32_t)Forward_Curve(point1, number, Joint1_AXIS);
  current_position_Joint[Joint2_AXIS] = (int32_t)Forward_Curve(point1, number, Joint2_AXIS);
  current_position_Joint[Joint3_AXIS] = (int32_t)Forward_Curve(point1, number, Joint3_AXIS);
  current_position_Joint[Joint4_AXIS] = (int32_t)Forward_Curve(point1, number, Joint4_AXIS);
  current_position_Joint[Joint5_AXIS] = (int32_t)Forward_Curve(point1, number, Joint5_AXIS);

  // SERIAL_ECHOPAIR(" point:", point);
  // SERIAL_ECHOPAIR(" x:", numberx);
  // SERIAL_ECHOPAIR("-y:", numbery);

  // DEBUG_POS_Joint("(After)Set_current_Joint_Curve_More", current_position_Joint);
}

inline void Set_current_Joint_Slope(const int32_t (&Set_current_Joint_data)[Joint_All], const float (&Set_current_Joint_slope)[Joint_All], const float point)
{
  DEBUG_POS_Joint("(Before)Set_current_Joint_Slope", Set_current_Joint_data);

  current_position_Joint[Joint1_AXIS] = Set_current_Joint_data[Joint1_AXIS] + (int32_t)LROUND(Set_current_Joint_slope[Joint1_AXIS] * point);
  current_position_Joint[Joint2_AXIS] = Set_current_Joint_data[Joint2_AXIS] + (int32_t)LROUND(Set_current_Joint_slope[Joint2_AXIS] * point);
  current_position_Joint[Joint3_AXIS] = Set_current_Joint_data[Joint3_AXIS] + (int32_t)LROUND(Set_current_Joint_slope[Joint3_AXIS] * point);
  current_position_Joint[Joint4_AXIS] = Set_current_Joint_data[Joint4_AXIS] + (int32_t)LROUND(Set_current_Joint_slope[Joint4_AXIS] * point);
  current_position_Joint[Joint5_AXIS] = Set_current_Joint_data[Joint5_AXIS] + (int32_t)LROUND(Set_current_Joint_slope[Joint5_AXIS] * point);

  SERIAL_ECHOPAIR("Slope J:", Set_current_Joint_slope[Joint1_AXIS]);
  SERIAL_ECHOPAIR(" Slope A:", Set_current_Joint_slope[Joint2_AXIS]);
  SERIAL_ECHOPAIR(" Slope B:", Set_current_Joint_slope[Joint3_AXIS]);
  SERIAL_ECHOPAIR(" Slope C:", Set_current_Joint_slope[Joint4_AXIS]);
  SERIAL_ECHOPAIR(" Slope D:", Set_current_Joint_slope[Joint5_AXIS]);

  SERIAL_ECHOLNPAIR(" point:", point);

  DEBUG_POS_Joint("(After)Set_current_Joint_Slope", current_position_Joint);
}

inline float Delta_Z_01mm(const float data1, const float data2) { return (data1 - data2) * 100; }

inline void buffer_line_to_destination_Constant(const float (&Set_Position)[XYZE], const int32_t (&Set_Position_Joint)[Joint_All], const int32_t &fr_mm_s)
{
#if ENABLED(HANGPRINTER)
  UNUSED(fr_mm_s);
#else
  // SERIAL_ECHOLNPGM("<<< buffer_line_to_destination_Constant");

  current_position[X_AXIS] = Set_Position[X_AXIS];
  current_position[Y_AXIS] = Set_Position[Y_AXIS];
  current_position[Z_AXIS] = Set_Position[Z_AXIS];
  current_position[E_AXIS] = Set_Position[E_AXIS];

  current_position_Joint[Joint1_AXIS] = Set_Position_Joint[Joint1_AXIS];
  current_position_Joint[Joint2_AXIS] = Set_Position_Joint[Joint2_AXIS];
  current_position_Joint[Joint3_AXIS] = Set_Position_Joint[Joint3_AXIS];
  current_position_Joint[Joint4_AXIS] = Set_Position_Joint[Joint4_AXIS];
  current_position_Joint[Joint5_AXIS] = Set_Position_Joint[Joint5_AXIS];

  planner.buffer_line_joint(Set_Position[X_AXIS], Set_Position[Y_AXIS], Set_Position[Z_AXIS], Set_Position_Joint[Joint1_AXIS], Set_Position_Joint[Joint2_AXIS], Set_Position_Joint[Joint3_AXIS], Set_Position_Joint[Joint4_AXIS], Set_Position_Joint[Joint5_AXIS], Set_Position[E_CART], fr_mm_s, active_extruder);
  // SERIAL_ECHOLNPAIR("feedrate_mm_s:",fr_mm_s);
  sync_plan_position();

// SERIAL_ECHOLNPGM(">>> buffer_line_to_destination_Constant");
#endif
}

inline void buffer_line_to_destination(const int32_t &fr_mm_s)
{
#if ENABLED(HANGPRINTER)
  UNUSED(fr_mm_s);
#else
  planner.buffer_line_joint(destination[X_AXIS], destination[Y_AXIS], destination[Z_AXIS], destination_Joint[Joint1_AXIS], destination_Joint[Joint2_AXIS], destination_Joint[Joint3_AXIS], destination_Joint[Joint4_AXIS], destination_Joint[Joint5_AXIS], destination[E_CART], fr_mm_s, active_extruder);
// SERIAL_ECHOLNPAIR("feedrate_mm_s:",fr_mm_s);
#endif
}
